C2
# Gives the premise of how this will be implemented because shiny
library(ggplot2)
source("plotitRight.R")
#Read Data
myData <- read.csv("EQC.csv");
TLData <- read.csv("TLC.csv");
# Ranges
E <- 1:8;  R <- 9:13
# Colnum Numbers
C1 <- 1;  C2 <- 2;
plotitRight(myData, TLData, E, R, C1, C2)
# Gives the premise of how this will be implemented because shiny
library(ggplot2)
source("plotitRight.R")
#Read Data
myData <- read.csv("EQC.csv");
TLData <- read.csv("TLC.csv");
# Ranges
E <- 1:8;  R <- 9:13
# Colnum Numbers
C1 <- 1;  C2 <- 2;
plotitRight(myData, TLData, E, R, C1, C2)
library(ggplot2)
source("plotitRight.R")
#Read Data
myData <- read.csv("EQC.csv");
TLData <- read.csv("TLC.csv");
# Ranges
E <- 1:8;  R <- 9:13
# Colnum Numbers
C1 <- 1;  C2 <- 2;
plotitRight(myData, TLData, E, R, C1, C2)
setwd("~/APRON/triangle/Tie_Line_Right")
library(ggplot2)
#Read Data
myData <- read.csv("EQC.csv");
TLData <- read.csv("TLC.csv");
# Ranges
E <- 1:8;  R <- 9:13
# Colnum Numbers
C1 <- 1;  C2 <- 2;
plotitRight(myData, TLData, E, R, C1, C2)
library(ggplot2)
source("plotitRight.R")
#Read Data
myData <- read.csv("EQC.csv");
TLData <- read.csv("TLC.csv");
# Ranges
E <- 1:8;  R <- 9:13
# Colnum Numbers
C1 <- 1;  C2 <- 2;
plotitRight(myData, TLData, E, R, C1, C2)
source("plotitRight.R")
source("plotitRight.R")
# Interpolation for Right Triangle
# Gives the premise of how this will be implemented because shiny
library(ggplot2)
source("plotitRight.R")
#Read Data
myData <- read.csv("EQC.csv");
TLData <- read.csv("TLC.csv");
# Ranges
E <- 1:8;  R <- 9:13
# Colnum Numbers
C1 <- 1;  C2 <- 2;
plotitRight(myData, TLData, E, R, C1, C2)
View(myData)
View(myData)
# Interpolation for Right Triangle
# Gives the premise of how this will be implemented because shiny
library(ggplot2)
source("plotitRight.R")
#Read Data
myData <- read.csv("EQC.csv");
TLData <- read.csv("TLC.csv");
# Ranges
E <- 1:8;  R <- 9:13
# Colnum Numbers
C1 <- 1;  C2 <- 2;
plotitRight(myData, TLData, E, R, C1, C2)
# Interpolation for Right Triangle
# Gives the premise of how this will be implemented because shiny
library(ggplot2)
source("plotitRight.R")
#Read Data
myData <- read.csv("EQC.csv");
TLData <- read.csv("TLC.csv");
# Ranges
E <- 1:8;  R <- 9:13
# Colnum Numbers
C1 <- 1;  C2 <- 2;
plotitRight(myData, TLData, E, R, C1, C2)
myData[1]
# Interpolation for Right Triangle
# Gives the premise of how this will be implemented because shiny
library(ggplot2)
source("plotitRight.R")
#Read Data
myData <- read.csv("EQC.csv");
TLData <- read.csv("TLC.csv");
# Ranges
E <- 1:8;  R <- 9:13
# Colnum Numbers
C1 <- 1;  C2 <- 2;
plotitRight(myData, TLData, E, R, C1, C2)
# Interpolation for Right Triangle
# Gives the premise of how this will be implemented because shiny
library(ggplot2)
source("plotitRight.R")
#Read Data
myData <- read.csv("EQC.csv");
TLData <- read.csv("TLC.csv");
# Ranges
E <- 1:8;  R <- 9:13
# Colnum Numbers
C1 <- 1;  C2 <- 2;
plotitRight(myData, TLData, E, R, C1, C2)
# # Plot it
# # b<- ggplot(myData, aes(x=Furfural, y=Ethylene))   + geom_point() + geom_segment(aes(x=0,y=100,xend=100,yend=0),linetype=2)
# # b <- b + stat_smooth(method = "loess", se= 0)
#
#
#
# # # Second Order
# # sec_order <- function(newdist, model) {
# #   coefs <- coef(model)
# #   #y = a + b*x + c*x^2
# #   res <- coefs[1] + (coefs[2] * newdist) + (coefs[3] * newdist^2)
# #   return(res)
# # }
# # Get the fits
# fitE <- lm(myData[E,C2] ~ poly(myData[E,C1], 2, raw=TRUE))
# fitR <- lm(myData[R,C2] ~ poly(myData[R,C1], 2, raw=TRUE))
#
# # TLData <- is column 1 for the raffinate or extraction? same for column 2
# # For this example, Extract: column 2, and Raffinate: column 1
#
# InterE <- sec_order(TLData[,2],fitE)
# InterR <- sec_order(TLData[,1],fitR)
#
# Inter <- data.frame(Raf = InterR, Ext = InterE)
#
# b <- b + geom_segment(data=TLData,aes(x=Inter$E,
#                                       y=TLData[,2],
#                                       xend=sort(Inter$R, decreasing = TRUE),
#                                       yend=sort(TLData[,1],decreasing = TRUE)),
#                       linetype=2)
# b
# Interpolation for Right Triangle
# Gives the premise of how this will be implemented because shiny
library(ggplot2)
source("plotitRight.R")
#Read Data
myData <- read.csv("EQC.csv");
TLData <- read.csv("TLC.csv");
# Ranges
E <- 1:8;  R <- 9:13
# Colnum Numbers
C1 <- 1;  C2 <- 2;
plotitRight(myData, TLData, E, R, C1, C2)
# # Plot it
# # b<- ggplot(myData, aes(x=Furfural, y=Ethylene))   + geom_point() + geom_segment(aes(x=0,y=100,xend=100,yend=0),linetype=2)
# # b <- b + stat_smooth(method = "loess", se= 0)
#
#
#
# # # Second Order
# # sec_order <- function(newdist, model) {
# #   coefs <- coef(model)
# #   #y = a + b*x + c*x^2
# #   res <- coefs[1] + (coefs[2] * newdist) + (coefs[3] * newdist^2)
# #   return(res)
# # }
# # Get the fits
# fitE <- lm(myData[E,C2] ~ poly(myData[E,C1], 2, raw=TRUE))
# fitR <- lm(myData[R,C2] ~ poly(myData[R,C1], 2, raw=TRUE))
#
# # TLData <- is column 1 for the raffinate or extraction? same for column 2
# # For this example, Extract: column 2, and Raffinate: column 1
#
# InterE <- sec_order(TLData[,2],fitE)
# InterR <- sec_order(TLData[,1],fitR)
#
# Inter <- data.frame(Raf = InterR, Ext = InterE)
#
# b <- b + geom_segment(data=TLData,aes(x=Inter$E,
#                                       y=TLData[,2],
#                                       xend=sort(Inter$R, decreasing = TRUE),
#                                       yend=sort(TLData[,1],decreasing = TRUE)),
#                       linetype=2)
# b
plotitRight(myData, TLData, E, R, C1, C2)
plotitRight(myData, TLData, E, R, C1, C2)
plotitRight(myData, TLData, E, R, C1, C2)
plotitRight(myData, TLData, E, R, C1, C2)
source("plotitRight.R")
plotitRight(myData, TLData, E, R, C1, C2)
plotitRight(myData, TLData, E, R, C1, C2)
source("plotitRight.R")
plotitRight(myData, TLData, E, R, C1, C2)
source("plotitRight.R")
plotitRight(myData, TLData, E, R, C1, C2)
plotitRight(myData, TLData, E, R, C1, C2)
plotitRight(myData, TLData, E, R, C1, C2)
source("plotitRight.R")
plotitRight(myData, TLData, E, R, C1, C2)
source("plotitRight.R")
plotitRight(myData, TLData, E, R, C1, C2)
source("plotitRight.R")
plotitRight(myData, TLData, E, R, C1, C2)
source("plotitRight.R")
plotitRight(myData, TLData, E, R, C1, C2)
source("plotitRight.R")
plotitRight(myData, TLData, E, R, C1, C2)
source("plotitRight.R")
plotitRight(myData, TLData, E, R, C1, C2)
source("plotitRight.R")
plotitRight(myData, TLData, E, R, C1, C2)
TLData[2]
source("plotitRight.R")
TLData[2]
plotitRight(myData, TLData, E, R, C1, C2)
source("plotitRight.R")
plotitRight(myData, TLData, E, R, C1, C2)
source("plotitRight.R")
plotitRight(myData, TLData, E, R, C1, C2)
source("plotitRight.R")
plotitRight(myData, TLData, E, R, C1, C2)
source("plotitRight.R")
plotitRight(myData, TLData, E, R, C1, C2)
source("plotitRight.R")
plotitRight(myData, TLData, E, R, C1, C2)
source("plotitRight.R")
plotitRight(myData, TLData, E, R, C1, C2)
source("plotitRight.R")
plotitRight(myData, TLData, E, R, 2, 2)
plotitRight(myData, TLData, E, R, 3, 2)
plotitRight(myData, TLData, E, R, 2, 3)
plotitRight(myData, TLData, E, R, 1, 2)
plotitRight(myData, TLData, E, R, 2, 1)
# Interpolation for Right Triangle
# Gives the premise of how this will be implemented because shiny
library(ggplot2)
source("plotitRight.R")
#Read Data
myData <- read.csv("EQC.csv");
TLData <- read.csv("TLC.csv");
# Ranges
E <- 1:8;  R <- 9:13
# Colnum Numbers
C1 <- 1;  C2 <- 2;
#plotitRight(myData, TLData, E, R, C1, C2)
# # Plot it
# b<- ggplot(myData, aes(x=Furfural, y=Ethylene))   + geom_point() + geom_segment(aes(x=0,y=100,xend=100,yend=0),linetype=2)
# b <- b + stat_smooth(method = "loess", se= 0)
# # Second Order
# sec_order <- function(newdist, model) {
#   coefs <- coef(model)
#   #y = a + b*x + c*x^2
#   res <- coefs[1] + (coefs[2] * newdist) + (coefs[3] * newdist^2)
#   return(res)
# }
# Get the fits
fitE <- lm(myData[E,C2] ~ poly(myData[E,C1], 2, raw=TRUE))
fitR <- lm(myData[R,C2] ~ poly(myData[R,C1], 2, raw=TRUE))
# TLData <- is column 1 for the raffinate or extraction? same for column 2
# For this example, Extract: column 2, and Raffinate: column 1
InterE <- sec_order(TLData[,2],fitE)
InterR <- sec_order(TLData[,1],fitR)
Inter <- data.frame(Raf = InterR, Ext = InterE)
b <- b + geom_segment(data=TLData,aes(x=Inter$E,
y=TLData[,2],
xend=sort(Inter$R, decreasing = TRUE),
yend=sort(TLData[,1],decreasing = TRUE)),
linetype=2)
b
setwd("~/APRON/triangle")
# Interpolation for Right Triangle
# Gives the premise of how this will be implemented because shiny
library(ggplot2)
source("plotitRight.R")
#Read Data
myData <- read.csv("EQC.csv");
TLData <- read.csv("TLC.csv");
# Ranges
E <- 1:8;  R <- 9:13
# Colnum Numbers
C1 <- 1;  C2 <- 2;
#plotitRight(myData, TLData, E, R, C1, C2)
# # Plot it
# b<- ggplot(myData, aes(x=Furfural, y=Ethylene))   + geom_point() + geom_segment(aes(x=0,y=100,xend=100,yend=0),linetype=2)
# b <- b + stat_smooth(method = "loess", se= 0)
# # Second Order
# sec_order <- function(newdist, model) {
#   coefs <- coef(model)
#   #y = a + b*x + c*x^2
#   res <- coefs[1] + (coefs[2] * newdist) + (coefs[3] * newdist^2)
#   return(res)
# }
# Get the fits
fitE <- lm(myData[E,C2] ~ poly(myData[E,C1], 2, raw=TRUE))
fitR <- lm(myData[R,C2] ~ poly(myData[R,C1], 2, raw=TRUE))
# TLData <- is column 1 for the raffinate or extraction? same for column 2
# For this example, Extract: column 2, and Raffinate: column 1
InterE <- sec_order(TLData[,2],fitE)
InterR <- sec_order(TLData[,1],fitR)
Inter <- data.frame(Raf = InterR, Ext = InterE)
b <- b + geom_segment(data=TLData,aes(x=Inter$E,
y=TLData[,2],
xend=sort(Inter$R, decreasing = TRUE),
yend=sort(TLData[,1],decreasing = TRUE)),
linetype=2)
b
# Interpolation for Right Triangle
# Gives the premise of how this will be implemented because shiny
library(ggplot2)
source("plotitRight.R")
#Read Data
myData <- read.csv("EQC.csv");
TLData <- read.csv("TLC.csv");
# Ranges
E <- 1:8;  R <- 9:13
# Colnum Numbers
C1 <- 1;  C2 <- 2;
plotitRight(myData, TLData, E, R, C1, C2)
# Plot it
b<- ggplot(myData, aes(x=Furfural, y=Ethylene))   + geom_point() + geom_segment(aes(x=0,y=100,xend=100,yend=0),linetype=2)
b <- b + stat_smooth(method = "loess", se= 0)
# Second Order
sec_order <- function(newdist, model) {
coefs <- coef(model)
#y = a + b*x + c*x^2
res <- coefs[1] + (coefs[2] * newdist) + (coefs[3] * newdist^2)
return(res)
}
# Get the fits
fitE <- lm(myData[E,C2] ~ poly(myData[E,C1], 2, raw=TRUE))
fitR <- lm(myData[R,C2] ~ poly(myData[R,C1], 2, raw=TRUE))
# TLData <- is column 1 for the raffinate or extraction? same for column 2
# For this example, Extract: column 2, and Raffinate: column 1
InterE <- sec_order(TLData[,2],fitE)
InterR <- sec_order(TLData[,1],fitR)
Inter <- data.frame(Raf = InterR, Ext = InterE)
b <- b + geom_segment(data=TLData,aes(x=Inter$E,
y=TLData[,2],
xend=sort(Inter$R, decreasing = TRUE),
yend=sort(TLData[,1],decreasing = TRUE)),
linetype=2)
b
# Interpolation for Right Triangle
# Gives the premise of how this will be implemented because shiny
library(ggplot2)
source("plotitRight.R")
#Read Data
myData <- read.csv("EQC.csv");
TLData <- read.csv("TLC.csv");
# Ranges
E <- 1:8;  R <- 9:13
# Colnum Numbers
C1 <- 1;  C2 <- 2;
plotitRight(myData, TLData, E, R, C1, C2)
# Plot it
b<- ggplot(myData, aes(x=Water, y=Ethylene))   + geom_point() + geom_segment(aes(x=0,y=100,xend=100,yend=0),linetype=2)
# Second Order
sec_order <- function(newdist, model) {
coefs <- coef(model)
#y = a + b*x + c*x^2
res <- coefs[1] + (coefs[2] * newdist) + (coefs[3] * newdist^2)
return(res)
}
# Get the fits
fitE <- lm(myData[E,C2] ~ poly(myData[E,C1], 2, raw=TRUE))
fitR <- lm(myData[R,C2] ~ poly(myData[R,C1], 2, raw=TRUE))
# TLData <- is column 1 for the raffinate or extraction? same for column 2
# For this example, Extract: column 2, and Raffinate: column 1
InterE <- sec_order(TLData[,2],fitE)
InterR <- sec_order(TLData[,1],fitR)
Inter <- data.frame(Raf = InterR, Ext = InterE)
b <- b + geom_segment(data=TLData,aes(x=Inter$E,
y=TLData[,2],
xend=sort(Inter$R, decreasing = TRUE),
yend=sort(TLData[,1],decreasing = TRUE)),
linetype=2)
b
# Interpolation for Right Triangle
# Gives the premise of how this will be implemented because shiny
library(ggplot2)
source("plotitRight.R")
#Read Data
myData <- read.csv("EQC.csv");
TLData <- read.csv("TLC.csv");
# Ranges
E <- 1:8;  R <- 9:13
# Colnum Numbers
C1 <- 1;  C2 <- 2;
plotitRight(myData, TLData, E, R, C1, C2)
# Plot it
b<- ggplot(myData, aes(x=Water, y=Furfural))   + geom_point() + geom_segment(aes(x=0,y=100,xend=100,yend=0),linetype=2)
# Second Order
sec_order <- function(newdist, model) {
coefs <- coef(model)
#y = a + b*x + c*x^2
res <- coefs[1] + (coefs[2] * newdist) + (coefs[3] * newdist^2)
return(res)
}
# Get the fits
fitE <- lm(myData[E,C2] ~ poly(myData[E,C1], 2, raw=TRUE))
fitR <- lm(myData[R,C2] ~ poly(myData[R,C1], 2, raw=TRUE))
# TLData <- is column 1 for the raffinate or extraction? same for column 2
# For this example, Extract: column 2, and Raffinate: column 1
InterE <- sec_order(TLData[,2],fitE)
InterR <- sec_order(TLData[,1],fitR)
Inter <- data.frame(Raf = InterR, Ext = InterE)
b <- b + geom_segment(data=TLData,aes(x=Inter$E,
y=TLData[,2],
xend=sort(Inter$R, decreasing = TRUE),
yend=sort(TLData[,1],decreasing = TRUE)),
linetype=2)
b
# Interpolation for Right Triangle
# Gives the premise of how this will be implemented because shiny
library(ggplot2)
source("plotitRight.R")
#Read Data
myData <- read.csv("EQC.csv");
TLData <- read.csv("TLC.csv");
# Ranges
E <- 1:8;  R <- 9:13
# Colnum Numbers
C1 <- 1;  C2 <- 2;
plotitRight(myData, TLData, E, R, C1, C2)
# Plot it
b<- ggplot(myData, aes(x=Furfural, y=Ethylene))   + geom_point() + geom_segment(aes(x=0,y=100,xend=100,yend=0),linetype=2)
# Second Order
sec_order <- function(newdist, model) {
coefs <- coef(model)
#y = a + b*x + c*x^2
res <- coefs[1] + (coefs[2] * newdist) + (coefs[3] * newdist^2)
return(res)
}
# Get the fits
fitE <- lm(myData[E,C2] ~ poly(myData[E,C1], 2, raw=TRUE))
fitR <- lm(myData[R,C2] ~ poly(myData[R,C1], 2, raw=TRUE))
# TLData <- is column 1 for the raffinate or extraction? same for column 2
# For this example, Extract: column 2, and Raffinate: column 1
InterE <- sec_order(TLData[,2],fitE)
InterR <- sec_order(TLData[,1],fitR)
Inter <- data.frame(Raf = InterR, Ext = InterE)
b <- b + geom_segment(data=TLData,aes(x=Inter$E,
y=TLData[,2],
xend=sort(Inter$R, decreasing = TRUE),
yend=sort(TLData[,1],decreasing = TRUE)),
linetype=2)
b
1 || 2 > 3
(1 || 2) > 3
(4 || 2) > 3
(4  > 3) | (1 < 0)
(1  > 3) | (1 < 0)
(1  > 3 | 1 < 0)
(1  > 3 | 1 < 3)
View(myData)
View(TLData)
s=
1
myData[,s]
myData[,s] == TLData
runif(1,23)
runif(1,23,)
runif(1,1,2)
runif(1,1,2)
sample(1:3)
sample(1:3)
sample(1:3,1)
sample(1:3,1)
sample(1:3,1)
sample(1:3,1)
sample(1:3,1)
sample(1:3,1)
sample(1:3,1)
sample(1:3,1)
sample(1:3,1)
sample(1:3,1)
sample(1:3,1)
sample(1:3,1)
sample(1:3,1)
sample(1:3,1)
sample(1:3,1)
sample(1:3,1)
sample(1:3,1)
sample(1:3,1)
sample(1:3,1)
s<-1
c(1:3)
d <- c(1:3)
setdiff(d,s)
setdiff(d,s)
setdiff(1:3,s)
runif(setdiff(1:3,s),1)
runif(setdiff(1:3,s),1)
runif(setdiff(1:3,s),1)
runif(setdiff(1:3,s),1)
runif(setdiff(1:3,s),1)
runif(setdiff(1:3,s))
runif(setdiff(1:3,s))
runif(setdiff(1:3,s))
(setdiff(1:3,s))
a<-(setdiff(1:3,s))
a
max(a)
min(a)
