cd code
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
shiny::runGitHub("rhandsontable", "jrowen", subdir = "inst/examples/rhandsontable_corr")
install.packages("metricsgraphics")
shiny::runGitHub("rhandsontable", "jrowen", subdir = "inst/examples/rhandsontable_corr")
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
shiny::runGitHub("rhandsontable", "jrowen", subdir = "inst/examples/rhandsontable_portfolio")
install.packages("dygraphs")
shiny::runGitHub("rhandsontable", "jrowen", subdir = "inst/examples/rhandsontable_portfolio")
install.packages("data.table")
shiny::runGitHub("rhandsontable", "jrowen", subdir = "inst/examples/rhandsontable_portfolio")
install.packages("quantmod")
shiny::runGitHub("rhandsontable", "jrowen", subdir = "inst/examples/rhandsontable_portfolio")
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
(1 | 2)
(1 | 2 > 9)
(1 > 3)
(1 > 3 | 2 < 4)
(1 > 3 & 2 < 4)
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
shiny::runGitHub("rhandsontable", "jrowen", subdir = "inst/examples/rhandsontable_output")
shiny::runGitHub("rhandsontable", "jrowen", subdir = "inst/examples/rhandsontable_frontier")
install.packages("lpSolve")
shiny::runGitHub("rhandsontable", "jrowen", subdir = "inst/examples/rhandsontable_frontier")
install.packages("quadprog")
shiny::runGitHub("rhandsontable", "jrowen", subdir = "inst/examples/rhandsontable_frontier")
shiny::runApp('APRON/triangle')
install_github("shinyTable", "trestletech")
library(devtools)
install_github("shinyTable", "trestletech")
runApp(system.file("examples/01-simple", package="shinyTable"))
runApp(system.file("examples/01-simple", package="shinyTable"))
shiny::runGitHub("shinyTable", "trestletech", subdir = "inst/examples/01-simple")
shiny::runGitHub("shinyTable", "trestletech", subdir = "inst/examples/02-matrix")
shiny::runGitHub("shinyTable", "trestletech", subdir = "inst/examples/03-click-input")
letters[1:10]
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
library("markdown", lib.loc="~/R/x86_64-unknown-linux-gnu-library/3.1")
library("rmarkdown", lib.loc="~/R/x86_64-unknown-linux-gnu-library/3.1")
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
shiny::runGitHub("rhandsontable", "jrowen", subdir = "inst/examples/rhandsontable_corr")
shiny::runGitHub("rhandsontable", "jrowen", subdir = "inst/examples/rhandsontable_datafile")
shiny::runGitHub("rhandsontable", "jrowen", subdir = "inst/examples/rhandsontable_output")
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
View(plotit)
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
library(shiny)
library(ggtern)
library(gridSVG)
library(svgPanZoom)
library(SVGAnnotation)
library(rhandsontable)
library(tools)
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
runGitHub('paulgovan/eAnalytics')
require(shiny)
runGitHub('paulgovan/eAnalytics')
shiny::runApp('APRON/triangle')
library(shiny)
library(ggtern)
library(gridSVG)
library(svgPanZoom)
library(SVGAnnotation)
library(rhandsontable)
library(tools)
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
shiny::runApp('APRON/triangle')
library(shiny)
library(ggtern)
library(gridSVG)
library(svgPanZoom)
library(SVGAnnotation)
library(rhandsontable)
library(tools)
shiny::runApp('APRON/triangle')
setwd("~/APRON/triangle")
myData = csv.read("sample.csv")
ggtern(data = myData, aes_string(x=colnames(myData)[2], y=colnames(myData)[1], z=colnames(myData)[3])) +
geom_point() + stat_smooth(level = 0)
myData = read.csv("sample.csv")
ggtern(data = myData, aes_string(x=colnames(myData)[2], y=colnames(myData)[1], z=colnames(myData)[3])) +
geom_point() + stat_smooth(level = 0)
myData = read.csv("sample.csv")
ggtern(data = myData, aes_string(x=colnames(myData)[2], y=colnames(myData)[1], z=colnames(myData)[3])) +
geom_point() + tern_stat_smooth(level = 0, method=loess)
myData = read.csv("sample.csv")
ggtern(data = myData, aes_string(x=colnames(myData)[2], y=colnames(myData)[1], z=colnames(myData)[3])) +
geom_point() + stat_smooth_tern(level = 0, method=loess)
myData = read.csv("sample.csv")
ggtern(data = myData, aes_string(x=colnames(myData)[2], y=colnames(myData)[1], z=colnames(myData)[3])) +
geom_point() + stat_smooth_tern(level = 0, method=gam)
myData = read.csv("sample.csv")
ggtern(data = myData, aes_string(x=colnames(myData)[2], y=colnames(myData)[1], z=colnames(myData)[3])) +
geom_point() + stat_smooth_tern(level = 0, method="loess")
myData = read.csv("sample.csv")
ggtern(data = myData, aes_string(x=colnames(myData)[1], y=colnames(myData)[2], z=colnames(myData)[3])) +
geom_point() + stat_smooth_tern(level = 0, method="loess")
shiny::runApp()
myData = read.csv("sample.csv")
ggtern(data = myData, aes_string(x=colnames(myData)[1], y=colnames(myData)[2], z=colnames(myData)[3])) +
geom_point() + stat_smooth_tern(level = 0, method="loess", model = 1)
myData = read.csv("sample.csv")
ggtern(data = myData, aes_string(x=colnames(myData)[1], y=colnames(myData)[2], z=colnames(myData)[3])) +
geom_point() + stat_smooth_tern(level = 0, method="loess", model = TRUE)
myData = read.csv("sample.csv")
ggtern(data = myData, aes_string(x=colnames(myData)[1], y=colnames(myData)[2], z=colnames(myData)[3])) +
geom_point() + stat_smooth_tern(se = 0, method="loess", model = TRUE)
myData = read.csv("sample.csv")
ggtern(data = myData, aes_string(x=colnames(myData)[1], y=colnames(myData)[2], z=colnames(myData)[3])) +
geom_point() + stat_smooth_tern(se = 0, method="loess", fullrange = TRUE)
myData = read.csv("sample.csv")
ggtern(data = myData, aes_string(x=colnames(myData)[1], y=colnames(myData)[2], z=colnames(myData)[3])) +
geom_point() + stat_smooth_tern(se = 0, method="loess", data = myDara)
myData = read.csv("sample.csv")
ggtern(data = myData, aes_string(x=colnames(myData)[1], y=colnames(myData)[2], z=colnames(myData)[3])) +
geom_point() + stat_smooth_tern(se = 0, method="loess", data = myData)
myData = read.csv("sample.csv")
ggtern(data = myData, aes_string(x=colnames(myData)[1], y=colnames(myData)[2], z=colnames(myData)[3])) +
geom_point() + stat_smooth_tern(se = 0, method="loess", data = aes_string(x=colnames(myData)[1], y=colnames(myData)[2], z=colnames(myData)[3])) )
myData = read.csv("sample.csv")
bah = read.csv("samplem.csv")
ggtern(data = bah, aes_string(x=colnames(bah)[1], y=colnames(bah)[2], z=colnames(bah)[3])) +
geom_point() + stat_smooth_tern(se = 0, method="loess", data = myData)
myData = read.csv("sample.csv")
bah = read.csv("samplem.csv")
ggtern(data = bah, aes_string(x=colnames(bah)[2], y=colnames(bah)[1], z=colnames(bah)[3])) +
geom_point() + stat_smooth_tern(se = 0, method="loess", data = myData)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
